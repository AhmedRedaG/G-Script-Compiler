=== Compiler Report ===

Tokens:
['DATATYPE', 'int', 1]
['IDENTIFIER', 'x', 1]
['ASSIGNMENT_OPERATOR', '=', 1]
['NUMBER', '10', 1]
['END_LINE_OPERATOR', ';', 1]
['DATATYPE', 'int', 2]
['IDENTIFIER', 'y', 2]
['ASSIGNMENT_OPERATOR', '=', 2]
['NUMBER', '5', 2]
['END_LINE_OPERATOR', ';', 2]
['DATATYPE', 'arr', 3]
['IDENTIFIER', 'z', 3]
['ASSIGNMENT_OPERATOR', '=', 3]
['ARRAY', '[1, 2, 3, 4, 5]', 3]
['END_LINE_OPERATOR', ';', 3]
['DATATYPE', 'int', 4]
['IDENTIFIER', 'mod', 4]
['END_LINE_OPERATOR', ';', 4]
['KEYWORD', 'if', 6]
['DELIMITER', '(', 6]
['IDENTIFIER', 'x', 6]
['RELATIONAL_OPERATOR', '>', 6]
['IDENTIFIER', 'y', 6]
['DELIMITER', ')', 6]
['DELIMITER', '{', 6]
['PRINT_FUNCTION', 'print', 7]
['DELIMITER', '(', 7]
['STRING', '"x is greater than y"', 7]
['DELIMITER', ')', 7]
['END_LINE_OPERATOR', ';', 7]
['KEYWORD', 'for', 8]
['DELIMITER', '(', 8]
['IDENTIFIER', 'i', 8]
['ASSIGNMENT_OPERATOR', '=', 8]
['NUMBER', '0', 8]
['DOUBLE_COLON', '::', 8]
['RELATIONAL_OPERATOR', '<', 8]
['NUMBER', '5', 8]
['DOUBLE_COLON', '::', 8]
['MATHEMATICAL_OPERATOR', '+', 8]
['NUMBER', '1', 8]
['DELIMITER', ')', 8]
['DELIMITER', '{', 8]
['PRINT_FUNCTION', 'print', 9]
['DELIMITER', '(', 9]
['IDENTIFIER', 'i', 9]
['DELIMITER', ')', 9]
['END_LINE_OPERATOR', ';', 9]
['IDENTIFIER', 'mod', 10]
['ASSIGNMENT_OPERATOR', '=', 10]
['IDENTIFIER', 'i', 10]
['MATHEMATICAL_OPERATOR', '%', 10]
['NUMBER', '2', 10]
['END_LINE_OPERATOR', ';', 10]
['KEYWORD', 'if', 11]
['DELIMITER', '(', 11]
['IDENTIFIER', 'mod', 11]
['RELATIONAL_OPERATOR', '==', 11]
['NUMBER', '0', 11]
['DELIMITER', ')', 11]
['DELIMITER', '{', 11]
['PRINT_FUNCTION', 'print', 12]
['DELIMITER', '(', 12]
['STRING', '"Even number found"', 12]
['DELIMITER', ')', 12]
['END_LINE_OPERATOR', ';', 12]
['DELIMITER', '}', 13]
['KEYWORD', 'elif', 13]
['DELIMITER', '(', 13]
['IDENTIFIER', 'mod', 13]
['RELATIONAL_OPERATOR', '==', 13]
['NUMBER', '1', 13]
['DELIMITER', ')', 13]
['DELIMITER', '{', 13]
['PRINT_FUNCTION', 'print', 14]
['DELIMITER', '(', 14]
['STRING', '"Odd number found"', 14]
['DELIMITER', ')', 14]
['END_LINE_OPERATOR', ';', 14]
['DELIMITER', '}', 15]
['DELIMITER', '}', 16]
['DELIMITER', '}', 17]
['KEYWORD', 'elif', 17]
['DELIMITER', '(', 17]
['IDENTIFIER', 'x', 17]
['RELATIONAL_OPERATOR', '==', 17]
['IDENTIFIER', 'y', 17]
['DELIMITER', ')', 17]
['DELIMITER', '{', 17]
['PRINT_FUNCTION', 'print', 18]
['DELIMITER', '(', 18]
['STRING', '"x is equal to y"', 18]
['DELIMITER', ')', 18]
['END_LINE_OPERATOR', ';', 18]
['KEYWORD', 'while', 19]
['DELIMITER', '(', 19]
['IDENTIFIER', 'y', 19]
['RELATIONAL_OPERATOR', '>', 19]
['NUMBER', '0', 19]
['DELIMITER', ')', 19]
['DELIMITER', '{', 19]
['PRINT_FUNCTION', 'print', 20]
['DELIMITER', '(', 20]
['IDENTIFIER', 'y', 20]
['DELIMITER', ')', 20]
['END_LINE_OPERATOR', ';', 20]
['IDENTIFIER', 'y', 21]
['ASSIGNMENT_OPERATOR', '=', 21]
['IDENTIFIER', 'y', 21]
['MATHEMATICAL_OPERATOR', '-', 21]
['NUMBER', '1', 21]
['END_LINE_OPERATOR', ';', 21]
['DELIMITER', '}', 22]
['DELIMITER', '}', 23]
['KEYWORD', 'else', 23]
['DELIMITER', '{', 23]
['PRINT_FUNCTION', 'print', 24]
['DELIMITER', '(', 24]
['STRING', '"x is less than y"', 24]
['DELIMITER', ')', 24]
['END_LINE_OPERATOR', ';', 24]
['KEYWORD', 'fin', 25]
['DELIMITER', '(', 25]
['IDENTIFIER', 'i', 25]
['DOUBLE_COLON', '::', 25]
['IDENTIFIER', 'z', 25]
['DOUBLE_COLON', '::', 25]
['MATHEMATICAL_OPERATOR', '+', 25]
['NUMBER', '1', 25]
['DELIMITER', ')', 25]
['DELIMITER', '{', 25]
['PRINT_FUNCTION', 'print', 26]
['DELIMITER', '(', 26]
['IDENTIFIER', 'i', 26]
['DELIMITER', ')', 26]
['END_LINE_OPERATOR', ';', 26]
['DELIMITER', '}', 27]
['DELIMITER', '}', 28]

Symbol Table:
name | type | value | size | dimension | line_of_declaration | line_of_usage | address
--------------------------------------------------
x | int | 10 | 4 | 0 | 1 | [1, 6, 17] | 0
y | int | ex | 4 | 0 | 2 | [2, 6, 17, 19, 20, 21, 21] | 4
z | arr | [1, 2, 3, 4, 5] | 20 | 1 | 3 | [3, 25] | 8
mod | int | ex | 4 | 0 | 4 | [4, 15, 11, 13, 13] | 28
i | int | z | 4 | 0 | 8 | [8, 9, 10, 25, 26] | 32

Parse Tree:
{'main_scope': [{'Declaration': [{'type': 'int'}, {'name': 'x'}, {'value': '10'}]}, {'Declaration': [{'type': 'int'}, {'name': 'y'}, {'value': '5'}]}, {'Declaration': [{'type': 'arr'}, {'name': 'z'}, {'value': '[1, 2, 3, 4, 5]'}]}, {'Declaration': [{'type': 'int'}, {'name': 'mod'}, {'value': 'undefined'}]}, {'IfStatement': {'Condition': [{'left': 'x'}, {'operator': '>'}, {'right': 'y'}], 'Body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'STRING'}, {'value': '"x is greater than y"'}]}, {'ForStatement': {'initialization': [{'name': 'i'}, {'value': '0'}, {'value': '0'}], 'condition': [{'relation': '<'}, {'value': '5'}], 'iteration': [{'operator': '+'}, {'value': '1'}], 'body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'IDENTIFIER'}, {'value': 'i'}]}, {'Assignment': [{'name': 'mod'}, {'value': {'type': 'BinaryOperation', 'operator': '%', 'left': {'type': 'IDENTIFIER', 'value': 'i'}, 'right': {'type': 'NUMBER', 'value': '2'}}}]}, {'IfStatement': {'Condition': [{'left': 'mod'}, {'operator': '=='}, {'right': '0'}], 'Body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'STRING'}, {'value': '"Even number found"'}]}], 'ElifStatement': {'Condition': [{'left': 'mod'}, {'operator': '=='}, {'right': '1'}], 'Body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'STRING'}, {'value': '"Odd number found"'}]}]}}}]}}], 'ElifStatement': {'Condition': [{'left': 'x'}, {'operator': '=='}, {'right': 'y'}], 'Body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'STRING'}, {'value': '"x is equal to y"'}]}, {'WhileLoop': {'Condition': [{'value1': 'y'}, {'comparison_type': '>'}, {'value2': '0'}], 'Body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'IDENTIFIER'}, {'value': 'y'}]}, {'Assignment': [{'name': 'y'}, {'value': {'type': 'BinaryOperation', 'operator': '-', 'left': {'type': 'IDENTIFIER', 'value': 'y'}, 'right': {'type': 'NUMBER', 'value': '1'}}}]}]}}]}, 'ElseBody': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'STRING'}, {'value': '"x is less than y"'}]}, {'FinStatement': {'initialization': [{'name': 'i'}], 'data': [{'value': 'z'}], 'iteration': [{'operator': '+'}, {'value': '1'}], 'body': [{'PrebuiltFunction': [{'type': 'PRINT_FUNCTION'}, {'arguments': 'IDENTIFIER'}, {'value': 'i'}]}]}}]}}]}

Compilation Times:
Lexer Time: 0.02014 seconds
Parser Time: 0.02300 seconds
Total Compiler Time: 0.04314 seconds
